{
  "description": "VaultSecret is the Schema for the vaultsecrets API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "VaultSecretSpec defines the desired state of VaultSecret",
      "properties": {
        "engineOptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "EngineOptions specifies options for the engine.",
          "type": "object"
        },
        "isBinary": {
          "description": "isBinary is a flag indicates if data stored in vault is\nbinary data. Since vault does not store binary data natively,\nthe binary data is stored as base64 encoded. However, same data get encoded\nagain when operator stored them as secret in k8s which caused the data to\nget double encoded. This flag will skip the base64 encode which is needed\nfor string data to avoid the double encode problem.",
          "type": "boolean"
        },
        "keys": {
          "description": "Keys is an array of Keys, which should be included in the Kubernetes\nsecret. If the Keys field is ommitted all keys from the Vault secret will\nbe included in the Kubernetes secret.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "Path is the path of the corresponding secret in Vault.",
          "type": "string"
        },
        "reconcileStrategy": {
          "description": "ReconcileStrategy defines the strategy for reconcilation. The default value is \"Replace\", which replaces any\nexisting data keys in a secret with the loaded keys from Vault. The second valid value is \"Merge\" wiche merges\nthe loaded keys from Vault with the existing keys in a secret. Duplicated keys will be replaced with the value\nfrom Vault. Other values are not valid for this field.",
          "type": "string"
        },
        "role": {
          "description": "Role specifies the role to use with PKI engine",
          "type": "string"
        },
        "secretEngine": {
          "description": "SecretEngine specifies the type of the Vault secret engine in which the\nsecret is stored. Currently the 'KV Secrets Engine - Version 1' and\n'KV Secrets Engine - Version 2' are supported. The value must be 'kv'. If\nthe value is omitted or an other values is used the Vault Secrets\nOperator will try to use the KV secret engine.",
          "type": "string"
        },
        "templates": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Templates, if not empty will be run through the the Go templating engine, with `.Secrets` being mapped\nto the list of secrets received from Vault. When omitted set, all secrets will be added as key/val pairs\nunder Secret.data.",
          "type": "object"
        },
        "type": {
          "description": "Type is the type of the Kubernetes secret, which will be created by the\nVault Secrets Operator.",
          "type": "string"
        },
        "vaultNamespace": {
          "description": "VaultNamespace can be used to specify the Vault namespace for a secret. When this value is set, the\nX-Vault-Namespace header will be set for the request. More information regarding namespaces can be found in the\nVault Enterprise documentation: https://www.vaultproject.io/docs/enterprise/namespaces",
          "type": "string"
        },
        "vaultRole": {
          "description": "VaultRole can be used to specify the Vault role, which should be used to get the secret from Vault. If the\nvaultRole property is set a new client with the specified Vault Role will be created and the shared client is\nignored. If the operator is configured using the token auth method this property has no effect.",
          "type": "string"
        },
        "version": {
          "description": "Version sets the version of the secret which should be used. The version\nis only used if the KVv2 secret engine is used. If the version is\nomitted the Operator uses the latest version of the secret. If the version\nomitted and the VAULT_RECONCILIATION_TIME environment variable is set, the\nKubernetes secret will be updated if the Vault secret changes.",
          "type": "integer"
        }
      },
      "required": [
        "path",
        "type"
      ],
      "type": "object"
    },
    "status": {
      "description": "VaultSecretStatus defines the observed state of VaultSecret",
      "properties": {
        "conditions": {
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
